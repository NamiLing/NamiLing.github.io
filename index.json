[{"categories":["折腾"],"content":"最近 Github 经常连不上。写了个 Shell 工具，连不上的时候就更新一下Host。可以配合 Alfred 使用。 此工具已更新至 Github。附有安装和卸载脚本。 使用的 host 源来自这里。其实用 SwitchHosts 更新也行，但我不喜欢小工具写成 Electron App……麻了，现在听个歌写个笔记 1个多 G 的内存就没了。 下面这个文件保存取名为 hoststool 赋予执行权限 chmod +x hoststool。如果为了执行起来方便，可以放进环境变量的目录（比如/usr/local/bin） 然后就可以使用 hoststool -u 更新 host 了，运行结果会发系统通知。之前可以自己看看 hosts 内容有没有问题。这是有几率失败的，因为用的 gittee 的 host 源……这种时候重试一次就好了。 #!/bin/bash showHelp() { echo \"-u [source_url] update github hosts. You can specify a custom host source\" echo \"-b backup /etc/hosts to /etc/hosts.backup\" echo \"-r recover hosts.backup to hosts\" echo \"-f list files in /etc which contains \\\"hosts\\\"\" } # ====== Main ===== if [ $# -eq 0 ]; then showHelp;exit 0;fi # CONF download_dir=\"$HOME/etc/hoststool\" github_hosts=\"https://gitee.com/yuchi-shentang/GithubHosts/raw/main/hosts.txt\" if [ ! -d \"$download_dir\" ]; then mkdir -p $download_dir fi case \"$1\" in -f) ls /etc | grep hosts; exit 0;; -b) sudo cp /etc/hosts /etc/hosts.backup; exit 0;; -r) sudo cp /etc/hosts.backup /etc/hosts; exit 0;; -u) if [ $2 ]; then github_hosts=$2;fi curl -o ${download_dir}/hosts ${github_hosts}; if [ $? -ne 0 ]; then echo \"[ERROR] 获取远程 host 出错，请尝试更换 source 或检查 download_dir 读写权限\" osascript -e 'display notification \"获取远程 host 出错，请尝试更换 source\" with title \"hoststool\"' exit 1 fi # Validate host content length lines=$(awk '{print NR}' ${download_dir}/hosts | tail -n1) if [ $lines -lt 10 ] then echo '[ERRO] 远程 Github Hosts 无效（Gitee源不稳定），通常重试即可' osascript -e 'display notification \"远程 Github Hosts 无效（Gitee源不稳定），通常重试即可\" with title \"hoststool\"' rm ${download_dir}/hosts exit 1 fi # Remove old content begin=$(sed -n '/# ==== Github Start ====/=' /etc/hosts | awk 'NR==1{print}') end=$(sed -n '/# ==== Github End ====/=' /etc/hosts | awk 'END{print}') echo \"Removing old hosts. Start at line \\\"${begin}\\\", End at line \\\"${end}\\\"\" cat /etc/hosts | sed \"${begin},${end}d\" \u003e ${download_dir}/hosts.tmp if [ $? -ne 0 ]; then ## Trip Failed echo \"[INFO] 当前 Host中 无旧的 Github Host 标记可清除\" else ## Trip Succeed, move result echo \"[INFO] 清除旧的 Github Host 标记\" sudo cp /etc/hosts /etc/hosts.backup \u0026\u0026 sudo cp ${download_dir}/hosts.tmp /etc/hosts; fi # Add new hosts sudo bash -c \"echo '# ==== Github Start ====' \u003e\u003e /etc/hosts\" # Add github host if [ $? -ne 0 ]; then echo \"[ERROR] 无root权限，请尝试运行脚本手动输入密码\" osascript -e 'display notification \"无root权限，请尝试运行脚本手动输入密码\" with title \"hoststool\"' rm ${download_dir}/hosts.tmp rm ${download_dir}/hosts exit 1; fi sudo bash -c \"echo \\\"# Updated at $(date)\\\" \u003e\u003e /etc/hosts\" # Add github host sudo bash -c \"cat ${download_dir}/hosts \u003e\u003e /etc/hosts\"; sudo bash -c \"echo '# ==== Github End ====' \u003e\u003e /etc/hosts\" rm ${download_dir}/hosts.tmp rm ${download_dir}/hosts echo \"[INFO] Github Hosts 块更新于 $(date)\" osascript -e 'display notification \"Github Hosts 已更新\" with title \"hoststool\"' exit 0;; -h|--help) showHelp; exit 0;; *) echo \"Unknown command\"; showHelp; exit 1;; esac ","date":"2021-08-07","objectID":"/2021-08-07-github-hosttools/:0:0","tags":["工具"],"title":"Github Hosts mac 自动更新","uri":"/2021-08-07-github-hosttools/"},{"categories":["折腾"],"content":"定时任务 保存以下文件为 hoststool.plist。 \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003c!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e \u003cplist version=\"1.0\"\u003e \u003cdict\u003e \u003ckey\u003eLabel\u003c/key\u003e\u003cstring\u003ehoststool\u003c/string\u003e \u003ckey\u003eProgramArguments\u003c/key\u003e \u003carray\u003e \u003cstring\u003e/usr/local/bin/hoststool\u003c/string\u003e \u003cstring\u003e-u\u003c/string\u003e \u003c/array\u003e \u003ckey\u003eRunAtLoad\u003c/key\u003e \u003ctrue/\u003e \u003ckey\u003eStartInterval\u003c/key\u003e \u003cinteger\u003e3600\u003c/integer\u003e \u003ckey\u003eStandardOutPath\u003c/key\u003e \u003cstring\u003e/Library/Logs/hoststool.log\u003c/string\u003e \u003ckey\u003eStandardErrorPath\u003c/key\u003e \u003cstring\u003e/Library/Logs/hoststool.log\u003c/string\u003e \u003c/dict\u003e \u003c/plist\u003e 把 /usr/local/bin ，改成你存放脚本的路径。 时间间隔为 3600 秒，可以自己修改。 然后执行 $ sudo cp hoststool.plist /Library/LaunchDaemons $ sudo chown root:admin /Library/LaunchDaemons/hoststool.plist $ sudo launchctl load -w /Library/LaunchDaemons/hoststool.plist 执行完就会立刻运行一次脚本。由于定时任务是 root 用户不是个人用户，不会有通知，可以去 Console 看 log。 ","date":"2021-08-07","objectID":"/2021-08-07-github-hosttools/:1:0","tags":["工具"],"title":"Github Hosts mac 自动更新","uri":"/2021-08-07-github-hosttools/"},{"categories":["折腾"],"content":"最近由于发现自己想回看的直播会被剪镜头，所以下定决心以后要学会录屏。但本人有强迫症，一般的录屏软件满足不了我的需要，主要是： 会录出鼠标操作、网络卡顿、水印等影响观感的画面 由于显示器和录屏软件的和原视频帧数可能不同步的问题，非常容易造成画面卡顿 体积远大于原视频，二压后画质失真重 通常来讲，能拿直播时的视频流就别真的屏幕录制。本来视频分段就都在缓存里，应该是有比较容易实现的办法做到实时保存的才对。 本文主要分为以下三个部分 m3u8简介 保存视频分段与合并 DRM 版权保护问题 ","date":"2021-05-12","objectID":"/2021-05-12-hslrecord/:0:0","tags":["前端"],"title":"m3u8直播流视频实时下载小记-HLS(Http Live Streaming)录屏","uri":"/2021-05-12-hslrecord/"},{"categories":["折腾"],"content":"m3u8简介 目前的各大流媒体平台视频（不管是直播还是回放）大多都会把视频切片为很小一段，长度可能10s左右，通常是.ts后缀的文件。而这一堆.ts文件的索引文件为m3u8文件。 一个通常的m3u8文件是如下格式 #EXTM3U #EXT-X-VERSION:3 #EXT-X-TARGETDURATION:10 #EXT-X-MEDIA-SEQUENCE:0 #EXTINF:10.000000, #EXT-X-PRIVINF:FILESIZE=3192240 https://website/xxx-00001.ts #EXTINF:10.000000, #EXT-X-PRIVINF:FILESIZE=3206904 https://website/xxx-00002.ts #EXTINF:10.000000, #EXT-X-PRIVINF:FILESIZE=2576164 https://website/xxx-00003.ts 也就是说，如果我们实时保存流媒体平台的视频，正常情况下，会保存一个.m3u8索引文件，和一堆.ts文件。有了这些文件我们可以直接使用支持m3u8的播放器（如IINA、VLC）进行播放。 m3u8是 HLS(HTTP Live Stream) HTTP直播流格式的基础。 ","date":"2021-05-12","objectID":"/2021-05-12-hslrecord/:1:0","tags":["前端"],"title":"m3u8直播流视频实时下载小记-HLS(Http Live Streaming)录屏","uri":"/2021-05-12-hslrecord/"},{"categories":["折腾"],"content":"保存视频分段与合并为MP4 工具准备： ffmpeg：强大的命令行视频处理工具，网上有很多安装教程，这里不重复 Chrome插件-猫抓：资源嗅探插件，下载需要科学上网 一个多线程的下载器（为了下载速度更快），如 aria2，网上有很多教程，这里不重复 一个支持使用正则表达式批量替换文字的txt编辑器，如sublime、vscode 以上方法会比较硬核，傻瓜式的方法可只准备下面这一个 Chrome插件-Stream Recorder：傻瓜式HLS一键保存插件，下载需要科学上网 ","date":"2021-05-12","objectID":"/2021-05-12-hslrecord/:2:0","tags":["前端"],"title":"m3u8直播流视频实时下载小记-HLS(Http Live Streaming)录屏","uri":"/2021-05-12-hslrecord/"},{"categories":["折腾"],"content":"方法一：下载所有分段并合并（稍硬核） 首先打开一个视频网站，这里以优酷的综艺为例。 打开后点击右上角的猫抓插件，会看到一个m3u8文件，和一堆ts文件。 首先我们可以先点下载按钮下载到本地 .m3u8 文件。 猫抓插件提供了对m3u8的解析，点击文件旁的放大镜就可以看见。 复制所有的内容，放到支持多线程的下载器里下载。 下载完成后，先整理一下本地的文件目录成如下 （为了看起来更清晰，以上各个文件名我已修改） 然后修改m3u8文件。我这里使用的编辑器是vs code。 m3u8文件里的原链接是这样的： https://valipl-vip.cp31.ott.cibntv.net/67756D6080932713CF4E/0300609724C6163EBF1C35DAC076221D-4673-49D8-A932-70FA-00001.ts?ccode=0502\u0026duration=6237\u0026expire=18000\u0026psid=28ae2c9bf869cf6f9ae28c814098b5fe43346\u0026ups_client_netip=3b4081be\u0026ups_ts=1620641730\u0026ups_userid=300380294\u0026utid=Xd0WGHofZhACAXtwDp2%2BGj22\u0026vid=XNTE0MDg5MTgyOA\u0026sm=1\u0026operate_type=1\u0026dre=u38\u0026si=78\u0026eo=0\u0026dst=1\u0026iv=1\u0026s=cbcad844c5894d209b9f\u0026type=mp4hd3v3\u0026bc=2\u0026hotvt=1\u0026t=d91e686d230165f\u0026cug=1\u0026rid=20000000DC17B06335EBB96917703D4A6B2DA12102000000\u0026vkey=B84707ca23f9e5899f9b0b9d97e4d1851 非常的长。我们首先要做的，是去掉每一行 ? 之后的所有字符。使用正则表达式批量替换，在查询里输入\\?.*?\\n，替换为 \\n 。注意要勾选正则表达式的符号。 然后要替换的是https://...内容，替换为本地的文件路径，让最后的剩下文件名指向本地的文件。 替换后的.m3u8文件是这样的 此时可以使用支持m3u8的播放器打开m3u8文件，观看是视频能否正常播放。 能正常播放后，使用ffmpeg合并为mp4，不用转码速度就很快 ffmpeg -i index.m3u8 -vcodec copy -acodec copy output.mp4 完成 缺点 对于回放的完整视频文件，通常会提供m3u8索引文件，但对于直播通常是没有m3u8索引的。这时候依然可以按上述方法下载所有分段，用ffmpeg进行合并。 但是直播时无法一次获取到所有ts的链接，而是边播边给。就算猫抓能批量复制链接，但为了防止直播时出什么意外（比如浏览器无响应了、突然断电），看一会儿就得存，无法好好享受直播，最后上千个文件的列表，也变得很麻烦。 ","date":"2021-05-12","objectID":"/2021-05-12-hslrecord/:2:1","tags":["前端"],"title":"m3u8直播流视频实时下载小记-HLS(Http Live Streaming)录屏","uri":"/2021-05-12-hslrecord/"},{"categories":["折腾"],"content":"使用 Stream-Recorder插件 傻瓜式保存 上一个方法的所有步骤，其实都能用这个插件搞定 Chrome插件-Stream Recorder：傻瓜式HLS一键保存插件，下载需要科学上网 使用上也很简单。视频播放开始后，点击这个按钮就行了，自动保存视频分段，同时合并为一个mp4。 简单介绍一下，这个插件主要有三个模式 Live：实时获取直播时的ts分段，可以没有索引文件自动合并 HLS：看回放时获取ts分段，可以没有索引文件自动合并。但是像B站这种用m4s非标准HLS的似乎用不了。 Capture：实时获取正在播放的HLS，直播回放均可，大部分视频格式都能用，兼容性最好。缺点是真的要一直播着。 也就是直播时使用Live抓取或Capture录屏，且可以自动合并视频音频，相当于直播时边看边存。 看回放时使用HLS或Capture保存视频。 ","date":"2021-05-12","objectID":"/2021-05-12-hslrecord/:2:2","tags":["前端"],"title":"m3u8直播流视频实时下载小记-HLS(Http Live Streaming)录屏","uri":"/2021-05-12-hslrecord/"},{"categories":["折腾"],"content":"DRM 版权保护问题 并不是所有的m3u8视频都能这么下载，有的经过了DRM(Digital rights management)的保护。这样的视频下载下来也是无法直接合并的。 有版权保护的视频，使用猫抓查看m3u8解析时，可以发现这么一行 Stream Recorder 也不支持加密视频的下载。 解密不在讨论范围内（我也不会），总得来说还是尽量支持正版。 PS：目前风气真的太严了，如果不是发现片段被删减，也不会想到去研究怎么录屏。既然花了钱买了相应的单场直播，也说明了会提供回放，要求拥有一个和直播时相同的回放个人觉得并不过分。最终给一个删减版，感觉这服务有些不值得，即便直播和录屏混剪都得给剪出来一个完整的版本。 PPS：明白大环境，没有全指责流媒体平台的意思。 ","date":"2021-05-12","objectID":"/2021-05-12-hslrecord/:3:0","tags":["前端"],"title":"m3u8直播流视频实时下载小记-HLS(Http Live Streaming)录屏","uri":"/2021-05-12-hslrecord/"},{"categories":["折腾"],"content":" drive.namichan.site 闲来无事用OneDrive+OneManager+阿里云函数计算搭了个可以分享的Onedrive网盘。Onedrive的账号是淘宝买的，5T容量。 分享出来的好处是，可以直链下载，可以多线程。速度看地区，我这大概1-2MB/s。 但是分享什么呢，还不知道。因为部署在国内，不会放敏感内容，那想分享的东西真的就变少了啊…… ","date":"2020-12-29","objectID":"/2020-12-29-%E4%B8%AA%E4%BA%BAonedrive%E5%88%86%E4%BA%AB%E7%BD%91%E7%9B%98/:0:0","tags":["资源整理","其它"],"title":"个人Onedrive分享网盘","uri":"/2020-12-29-%E4%B8%AA%E4%BA%BAonedrive%E5%88%86%E4%BA%AB%E7%BD%91%E7%9B%98/"},{"categories":["折腾"],"content":"网上讲如何开机运行脚本的很多，但我有关机时关闭远程服务的需求。于是上外网查了一下如何在关机时执行一段脚本。 ","date":"2020-11-24","objectID":"/2020-11-24-mac%E4%B8%8A%E5%A6%82%E4%BD%95%E5%BC%80%E6%9C%BA%E4%B8%8E%E5%85%B3%E6%9C%BA%E6%97%B6%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8Cshell%E8%84%9A%E6%9C%AC/:0:0","tags":["Shell","Mac"],"title":"Mac上如何开机与关机时自动运行Shell脚本","uri":"/2020-11-24-mac%E4%B8%8A%E5%A6%82%E4%BD%95%E5%BC%80%E6%9C%BA%E4%B8%8E%E5%85%B3%E6%9C%BA%E6%97%B6%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8Cshell%E8%84%9A%E6%9C%AC/"},{"categories":["折腾"],"content":"新建一个shell文件 这个shell中包含了你需要开机关机时运行的脚本。 #!/bin/bash function shutdown() { # 关机用的脚本放这里 exit 0 } function startup() { # 开机用的脚本放这里 tail -f /dev/null \u0026 wait $! } trap shutdown SIGTERM trap shutdown SIGKILL startup; 以上文件我取名为launchdeamon，赋予了当前用户的执行权限。 chmod 755 launchdaemon 新建plist文件 为了让launchdeamon能在开机时自动运行，需要编写一个相应plist文件，使用launctl做到开机启动。关于launchctl和plist的作用，请先查看这篇文章：Mac执行定时任务之launchctl。 plist文件的内容如下： \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003c!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"\u003e \u003cplist version=\"1.0\"\u003e \u003cdict\u003e \u003ckey\u003eLabel\u003c/key\u003e\u003cstring\u003eboot-shutdown\u003c/string\u003e \u003ckey\u003eProgramArguments\u003c/key\u003e \u003carray\u003e \u003cstring\u003e$SCRIPT_PATH/launchdaemon\u003c/string\u003e \u003c/array\u003e \u003ckey\u003eRunAtLoad\u003c/key\u003e \u003ctrue/\u003e \u003ckey\u003eStandardOutPath\u003c/key\u003e \u003cstring\u003e$LOG_PATH/boot-shutdown.log\u003c/string\u003e \u003ckey\u003eStandardErrorPath\u003c/key\u003e \u003cstring\u003e$PLOG_PATH/boot-shutdown.err\u003c/string\u003e \u003c/dict\u003e \u003c/plist\u003e plist文件以键值对的形式存储信息。以上文件的字段解释： Label：标签，也就是运行该plist显示的名字。这里为boot-shutdown ProgramArguments：array里可以存放多个需要运行程序。这里的$SCRIPT_PATH请自己修改。 RunAtLoad：开机自启，为true StandardOutPath：打印标准输出到某个文件，方便查看程序后台运行的结果，$LOG_PATH自行修改。 StandardErrorPath：打印标准错误到某个文件，同上。 以上文件我取名为 boot-shutdown-script.plist 。 由于shell脚本的执行权限是当前用户，以上文件需要放入当前用户的开机启动文件夹，即为 ~/Library/LaunchAgents 。 然后将plist文件加入开启启动： launchctl load ~/Library/LaunchAgents/boot-shutdown-script.plist 此时重启后，可以使用以下命令查看脚本运行状态 launchctl list | grep boot 输出为 438 0 boot-shutdown 第一个是pid。第二个为状态码，为0说明正常运行中。 参考： Run a script only at shutdown (not log off or restart) on Mac OS X ","date":"2020-11-24","objectID":"/2020-11-24-mac%E4%B8%8A%E5%A6%82%E4%BD%95%E5%BC%80%E6%9C%BA%E4%B8%8E%E5%85%B3%E6%9C%BA%E6%97%B6%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8Cshell%E8%84%9A%E6%9C%AC/:1:0","tags":["Shell","Mac"],"title":"Mac上如何开机与关机时自动运行Shell脚本","uri":"/2020-11-24-mac%E4%B8%8A%E5%A6%82%E4%BD%95%E5%BC%80%E6%9C%BA%E4%B8%8E%E5%85%B3%E6%9C%BA%E6%97%B6%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8Cshell%E8%84%9A%E6%9C%AC/"},{"categories":["折腾"],"content":" 因为开了两个github账号，需要两个SSH进行上传。在分别进行了SSH绑定之后。却一直显示permisson denied。接下来说下具体的坑和解决办法。 ","date":"2020-11-23","objectID":"/2020-11-23-%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%A4%9A%E9%81%87%E5%88%B0%E7%9A%84ssh%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/:0:0","tags":["git"],"title":"多个Github账号遇到的SSH权限问题","uri":"/2020-11-23-%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%A4%9A%E9%81%87%E5%88%B0%E7%9A%84ssh%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"},{"categories":["折腾"],"content":"问题描述 我的Github账号有两，姑且这么叫 usera userb usera是很久之前开的，userb是现在才开的。之前都用的usera，对应电脑上也是usera的SSH Key。这次git init之后，想传repo到userb上去。我给userb生成了SSH Key并上传到了对应账号，但Push时： Permission to userb/blog.git denied to usera. 根据这一篇的表述，说是不同账号要设置不同的ssh config。具体来讲，是在.ssh/config中写入： Host github.com-usera HostName github.com User usera PreferredAuthentications publickey IdentityFile ~/.ssh/usera_rsa IdentitiesOnly yes Host github.com-userb HostName github.com User userb PreferredAuthentications publickey IdentityFile ~/.ssh/userb_id_rsa IdentitiesOnly yes 然后执行 ssh-add ~/.ssh/usera_rsa ssh-add ~/.ssh/userb_rsa 最后改相应repo下的config git config user.name \"userb\" git config user.email \"userb@gmail.com\" 这么一大通操作后，我继续Push，又得到了 Permission to userb/blog.git denied to usera. 我：？？？ 我怀疑是不是git config不对。执行了 git config --get [user.name] 和 git config --get [user.email] 。返回的都是userb。我甚至改了全局的config，依然得到了 Permission to userb/blog.git denied to usera. …… 我又执行了 git config -l 看看，发现username有两行。前面的一行值为usera，后面一行为userb。然后我查看git config -e ，又确实只有一行是我刚设置的。get user.name也返回userb 。 然后我又查，stackoverflow上不少人遇到了这个问题。有人说，这是Xcode Cache的锅，自动存储了密码，去keychain里清除密码就好了。 我按步骤清了密码的，又得到了 Permission to userb/blog.git denied to usera. 很明显不是密码的问题。再说我都多久没用苹果自带的的钥匙串了，我快疯了，就没有一个方法可以让这个repo变成userb吗？？？ 终于，看到有人说，强行添加Remote orgin的账号有用，这么试了一下 git config -e 强行加账号 remote=\"\u003chttps://userb@github.com/userb/blog.git\u003e...\" 然后输入密码，然后终于push成功了！ 这个时候我又查看了一下git config git config -l 发现user.name只剩一行了。 ","date":"2020-11-23","objectID":"/2020-11-23-%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%A4%9A%E9%81%87%E5%88%B0%E7%9A%84ssh%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/:1:0","tags":["git"],"title":"多个Github账号遇到的SSH权限问题","uri":"/2020-11-23-%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%A4%9A%E9%81%87%E5%88%B0%E7%9A%84ssh%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"},{"categories":["折腾"],"content":"为什么SSH没有生效 其实这是个非常低级的错误。因为我使用的远程仓库是http协议(https://github…)，不是SSH协议（git@github.com）。当然改SSH是没有用的。 使用http协议，在使用多个账户需要加上这个 git config --global credential.github.com.useHttpPath true 即便是使用ssh协议，在执行上一节的步骤后，也还需要在git config -e里编译remoteURL，与ssh config中的Host值对应。 [remote \"origin\"] # url=git@github.com:userb/xxx.git url=git@github.com-userb:userb/xxx.git 每次git clone之后都得记得要这么编辑一下，不然不知道会用哪个SSH Key…… 参考： Multiple SSH Keys settings for different github account How to store credentials for two different github accounts? Git pushing to remote GitHub repository as wrong user 论git中使用https和ssh协议的区别 ","date":"2020-11-23","objectID":"/2020-11-23-%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%A4%9A%E9%81%87%E5%88%B0%E7%9A%84ssh%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/:2:0","tags":["git"],"title":"多个Github账号遇到的SSH权限问题","uri":"/2020-11-23-%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E5%A4%9A%E9%81%87%E5%88%B0%E7%9A%84ssh%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"},{"categories":null,"content":"About Me Hi, I’m Nami Ling. Major in Computer Science. I like drawing. I cannot fully get NLP. But I have to graduate from that. ","date":"2020-10-31","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"Programing Basic Java, C++, Golang, HTML, CSS, JS, Python I’m not familiar with engineer framwork. Maybe I’m really not suitable for this. ","date":"2020-10-31","objectID":"/about/:2:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"Design\u0026Draw PS, AI, Sketch, Blender Character Design and Illustration(for Anime). Poster Design. Learn to draw in Krenz’s class for basic. He is a good teacher. ","date":"2020-10-31","objectID":"/about/:3:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"Game Minecraft Sky light awaits Human falls flat I like any open world game ","date":"2020-10-31","objectID":"/about/:4:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["折腾"],"content":"换个主题换个心情。作为长期使用命令行的人，2020年份的换心情时刻再次到来了。 基本环境 安装zsh与oh-my-zsh：网上太多教程了，自行搜一下，略。 ","date":"2020-10-17","objectID":"/2020-10-17-macos-powerlevel-zsh%E4%B8%BB%E9%A2%98%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95-2020/:0:0","tags":["工具","主题"],"title":"macOS powerlevel+zsh主题折腾记录(2020)","uri":"/2020-10-17-macos-powerlevel-zsh%E4%B8%BB%E9%A2%98%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95-2020/"},{"categories":["折腾"],"content":"powerlevel10k **powerlevel10k**是一个非常牛逼的Zsh主题，继承于有名的powerlevel9k。官方文档 对于安装步骤写得非常详细了。我只是翻译和记录一下重点。 1. 安装字体 终端的UI本质都是字符，powerlevel使用了大量带特殊icon的字符，因此不安装额外的字体无法正常显示。可以安装**推荐的字体**。而事实上，所有结尾带有Nerd fonts的字体都包含这些特殊字符，可以理解为扩展的字体。 如果不想自己安字体，也可以跳到第2步，在配置文件时会亲切地问你要不要安默认字体，选yes就自动帮你装好，真算是懒到家的服务。 推荐相关字体仓库Nerd font。个人推荐字体Space Mono nerd font。 2. 安装powerlevel10k 官方提供了两种安装方式。一个手动安装，适用于安装了zsh但没安装oh-my-zsh的。一个是通过oh-my-zsh设置安装。 手动安装如下 git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ~/powerlevel10k echo 'source ~/powerlevel10k/powerlevel10k.zsh-theme' \u003e\u003e! ~/.zshrc oh-my-zsh安装如下 git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k echo 'ZSH_THEME=\"powerlevel10k/powerlevel10k\"' \u003e\u003e ~/.zshrc 此时重开一个iTerm窗口，会进入主题配置引导，有非常详细的注释跟着选就好，选完就能用了。 完成配置后会生成一个配置文件 .p10k.sh ，里面有更详细的设置，想要更改可以看看。我在完成配置引导后就改了一行。 typeset -g POWERLEVEL9K_TRANSIENT_PROMPT=same-dir 另外，prompt颜色是根据终端的主题来的，但总的来说变化不大，prompt是蓝色或是紫色，想要其他色系的需要自己魔改（blue组改为红色之类的，比如fahrenhit主题）。通常希望您先设计好配色再这样做，否则终端变得更丑可能会是非常常见的事。 此外可以自定义prompt中的字符颜色，首先可以通过一行命令查看一下颜色编号。 for i in {0..255}; do print -Pn \"%K{$i} %k%F{$i}${(l:3::0:)i}%f \" ${${(M)$((i%6)):#3}:+$'\\n'}; done 然后去 .p10k.sh 中查询相关关键字color，foreground，background。修改相应色号即可。 powerline powerline是一个老牌的zsh状态信息插件。之前一直用的这个，今年开始觉得它有点丑，不用这个了，仅仅写下来作备份。 使用powerline需要安装python和pip。由于mac自带的python不会自带pip，需要先装下pip sudo easy_install pip 把python包的bin目录加入环境变量。在~/.zshrc中追加 export PATH=\"/Users/你的名字/Library/Python/2.7/bin:$PATH\" powerline算是一个zsh主题 pip install --user powerline-status 查看一下安装路径 pip show powerline-status .zshrc添加安装路径下的.zsh自动执行 # powerline-status . /Users/你的名字/Library/Python/2.7/lib/python/site-packages/powerline/bindings/zsh/powerline.zsh 重启一下iTerm，应该可以看到powerline的默认主题了。 ","date":"2020-10-17","objectID":"/2020-10-17-macos-powerlevel-zsh%E4%B8%BB%E9%A2%98%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95-2020/:1:0","tags":["工具","主题"],"title":"macOS powerlevel+zsh主题折腾记录(2020)","uri":"/2020-10-17-macos-powerlevel-zsh%E4%B8%BB%E9%A2%98%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95-2020/"},{"categories":["折腾"],"content":" 参考：Mac 退出与卸载 GlobalProtect mac上的Global Protect近似于流氓软件，但迫于学校要求不得不用。于是写了个shell脚本。 if [ $# -eq 0 ]; then exit 0;fi case \"$1\" in -h|--help) echo \"-l launch\"; echo \"-k kill\"; echo \"-as launch and set autostart\"; echo \"-uas kill and unset autostart\"; echo \"-h help\"; exit 0;; -k) launchctl unload /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*;exit 0;; -l) launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*;exit 0;; -uas) launchctl unload -w /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*;exit 0;; -as) launchctl load -w /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*;exit 0;; esac 在/usr/local/bin下新建文件，输入以上内容，并赋予执行权限即可。 ","date":"2020-07-25","objectID":"/2020-07-25-globalprotect%E5%90%AF%E5%8A%A8%E9%80%80%E5%87%BA%E8%84%9A%E6%9C%AC-mac/:0:0","tags":["工具"],"title":"GlobalProtect启动退出脚本(MAC)","uri":"/2020-07-25-globalprotect%E5%90%AF%E5%8A%A8%E9%80%80%E5%87%BA%E8%84%9A%E6%9C%AC-mac/"},{"categories":["Diary"],"content":"不写程序了，也不会做科研。到此为止吧。 ","date":"2019-07-16","objectID":"/2019-07-16-%E6%B1%BA%E3%81%BE%E3%81%A3%E3%81%9F/:0:0","tags":["生活"],"title":"決まった","uri":"/2019-07-16-%E6%B1%BA%E3%81%BE%E3%81%A3%E3%81%9F/"},{"categories":["Diary"],"content":"看书之后随便想到的一大堆东西，反正记记据说总结思考模式会有用。 我一度以为，画画和音乐是我的幻想（病态理想型），真我应该是去适应社会的，因为适应不下去了才沉迷于幻想。 现在看来不是的，我开始接触画画和音乐时都是非常好的状态，并不是难过的时候沉迷的病态理想（入汉服坑才是难过的时候开始疯狂买好叭），反而是难过的时候画不下去，会幻想我要是在社会上足够强了，挑不出我什么刺了，就没人会管我干什么了。 我的病态理想应该是我想让所有人满意，适应所有的社会要求，能好好地读研，读博，爬梯子，甚至不惜去脱离真我。前二十年因为学的方向宽泛活得还不错，我甚至一度觉得我就该是这样的人。直到我决定放弃所有爱好真的努力往科研方向走的时候，我才发现我举步维艰，每走一步都是十指连心，痛恨你为什么会成为这样的一个人。 做工程本是一个可以到达的理想型，逃进去看起来也没有那么不合群。可惜我一直没搞清楚想要的是什么，我也不是对做代码本身感兴趣，只是简单觉得，能够接触到一些大框架上逻辑设计的东西还能实现出来，也算是沾边了。 不过我自认为我童年没太多创伤，只是属于被管得严的类型，现在看来导致了情感的封闭——大学一开始去参加很多活动，我妈妈觉得我好了，变外向一点了。但我已经不太能有感受恋爱的能力了。能感受到有人对我不一样，但我既没有讨厌也没有喜欢，就像一块冰。同时思念、同情、感激等等的感觉也直线下降。感激是“别人对我好我理应感激，即便我根本不想要且会造成困惑”，和人打招呼是因为老被说“你怎么这么没有礼貌见人都不打招呼”，掩埋掉了一系列本该发自内心的东西，害怕因为露出那些真实的想法而变得不可爱了，所以常常恐惧。所以会逃进代码里，代码好啊，就是技术，会被淘汰，但很客观真实。 我甚至觉得，爸爸和妈妈婚姻是错误的，他们俩的思想对彼此的真实人格都会造成伤害。但现在已经磨地差不多了说这些没什么意义。都放弃了真我，我爸是放弃了后躺尸，我妈则是把她的真我完全灌输给我。 我妈妈曾经一副忧心忡忡的样子说，你堂弟最近陷入了哲学，挂科太多了。我觉得没有问题，挂科是社会意义上的一种失败，并不意味着人生无路可走，更可怕的时没找到自己该走的路。如果他按照要求去履行一个对他而言不并适合的完美主义，也是病态理想型，又不去思考，可能会变成我爸。在我们看来，迷失自我远远比挂个科严重。 不过说到最后，会思考这些问题的人基本远离了大富大贵。毕竟真我的追求就是大富大贵（泛指社会意义上人的成功）的人，大概是不会陷进哲学问题的。 学校的心理咨询中心，会解决实际的问题，会找到目前的问题的根源（比如表现上是人和人的矛盾，事实是你想做的和目前在做的之间的矛盾），但不及根，对错也都是自己判断， 不似一般问诊，药只能是自己开。没有经历过困惑的人，说起来会很难理解。幸运的是，能找到同样思考方式的人交流（虽然有的人藏得太深了表面完全看不出来），不过同类人交流的毛病就是一直互相「迷惑をかけて、すまん！」 ","date":"2019-04-26","objectID":"/2019-04-26-2019%E5%B9%B404%E6%9C%8826%E6%97%A5/:0:0","tags":["生活"],"title":"2019年04月26日","uri":"/2019-04-26-2019%E5%B9%B404%E6%9C%8826%E6%97%A5/"},{"categories":["Diary"],"content":"自我发泄罢了。 1 最近有部剧在三次元很火，叫都挺好。姚晨在里面主演了个从困苦中长大的女孩，在什么都不好下的情况下逆风翻盘，过上了自己所理想的生活。 苏明玉所代表的是三次元主流社会的一种理想生活模板。有钱，有事业，有家庭，会生活，是社会对于人“成功”和“幸福”的典范，也是很多人向往的潮流。当个人对自己的期望与社会对个人的期望是一致时，奋斗会是一件艰苦但幸福的事，比如苏明玉。反其道而行之，即使奋斗也是艰苦与痛苦。因为社会的不认同，自己的理性也不去认同。这时的理想与现实是无比割裂的。 我妈也不例外，给我发了一篇“有钱一时爽，一直有钱一直爽”的爆文。她是最喜欢这种有钱的小资生活的人，可惜起点太低，所以希望我能成为外向/自律且能过好生活的有钱人。很不巧，她的女儿完全相反，是一个非常内向/对不想做的事极度不自律/对想做的事能把对己极度push的人。 按照MBTI的分类方法，苏明玉（姚晨饰）是ENTJ，指挥官型人格。而我是INTP，如果T再弱一些，F的属性再重一些，也就是INFP时，是我的抑郁状态。抑郁状态不是悲伤，接近崩溃，造成的影响难以逆转。 2 我的一个朋友在985学的软件工程，可开心了，每一次学习知识都是有趣的，和大家做出什么东西都很有成就感。 我曾经一起玩电子音乐编曲的朋友，在普通本科学软件工程，不喜欢做网页，因为做网页不是设计网页，不像作曲编曲就是设计音乐。所以他在自学Unity，说想做游戏。 另一个一起玩电子音乐编曲的朋友，学化学的，不编曲了。 我也不编曲了。 3 前段时间晚上和一个画画的大佬交流。大佬不是天生的大佬，这两年是看着大佬进步的，尤其进了公司后，画技一月一变。大佬翻出了之前的黑历史给我看，确实还挺黑的，然后说，“你现在画得可比我那时候好多了，有被鼓励到吗？” 我仔细想想，说“没有[捂脸]”。 大佬说我怎么这么丧，要是小海（另一个画友）看了那肯定高兴炸了。大佬说他上大学那会儿临摹了一张图，当时觉得自己牛逼得不行，现在一看，什么鬼。 我确实没有被鼓励到，这挺对不住别人的鼓励的。我也很羡慕这种有点小成就就能很开心的心态。但有人告诉我，这种小成就感会造成短视，选择这样的行业可能不会有太高的高度（没错说得就是前端，几年下来牛逼到不行年薪也就40w）。如果我还把画画当成兴趣，那我也是那个画了个很像的临摹就觉得自己特牛逼到处发社交平台的人。但现在不行了，我清楚我要是在毕业之前不能画到一种可以靠画画吃饭的水平，可能会永无天日，也永远没有去提出要求让家里继续花钱的权利。 而基友就很不一样，想画就画，不想画就把画笔一摔：“老子不画了，老子要打游戏。” 4 前段时间和一个热爱科研的大佬用qq写信交淡，聊的是关于人生的思考。大佬一直年级前十，真的热爱科研，通原导论课这种介绍专业大纲的论文拿了满分。他说他很纠结，因为不管是参加比赛，去实验室工作，拿奖，都是真的喜欢，不是为了社会意义上的功名。所以他为了有自己安静思考的空间，没有去清华（要去一定可以去的那种），拿特奖进了Top3觉得已经知足了。但他爸爸觉得他太寡淡，不去争，只留在小破学校。他纠结的是：“社会上都希望给人标签化，而我在做的事情是去标签化。那我是要坚持非标签化的生活习性，并在这个道路上找到容身之地，还是选择标签化自己，和正常的社会人一样建功立业呢？” 我看完几乎要给他跪下。在平常人眼里，做科研已经社会上非常认可的一条路，社会自动会给他贴上科研大佬的标签，现在不去清华以后过自己想要的生活还是绰绰有余的。只不过他爹是更功利一些，更加看重他的标签罢了。 但这确实是一个多想想就无解的问题。在人际关系过于庞大的社会，人们只会看你有的标签和别人口中的印象。标签不适合就首先被淘汰了。大佬不用担心，他选的路和他拥有的标签是一致的。而我呢？标签和想选的路一直不一致的怎么办？ 5 我相信是能做好一件事的是真的热爱的。 但是先有热爱才有的一步步成就，还是先有的一步步成就才有的热爱呢。 这两者都有。龙哥是越来越喜欢演戏的。而年轻有为的大佬们都是先有热爱的。但自己呢？能放弃喜欢的事情把热爱挪到社会的给正轨上吗？ 6 都说二十多岁的年轻人选择很多，其实一点不多。不说天赋筛掉的路，从填好高考志愿的那一刻，社会已经对你有了期待的方向。等到工作时，除了部分自由职业者和创业者，要走什么路几乎可以一眼见底。转行的成本不是一般人承担得起的，包括精神上和物质上。 而当能承担转行的成本时，说明在原来的领域已经是做得很好的，而我相信是能做好一件事的是真的热爱的。这就变成了一个无法解开的死锁。 导师不赞同学生写技术博客。导师赞同用什么学什么。这也是一种一眼见底。“哪管喜不喜欢，只看能不能干。”一个创业的哥哥说。 不知道为什么，我非常非常讨厌这样的模式。理性告诉我这是实际情况，是对的，这样的人通常过得很好。可我依旧讨厌，迫切想远离。太现实主义了。他们先决定了想怎么活，干什么是无所谓的，只要能干。而我是先想干什么，怎么活是无所谓的，只要能活。 可能还是太年轻，被打击得不够狠。 7 我仍然相信科技能从实处改变生活，并且看到人们的生活因此更加丰富多彩而欣喜。但我仍然不知道怎么做。 ","date":"2019-03-27","objectID":"/2019-03-27-%E9%83%BD%E6%8C%BA%E5%A5%BD/:0:0","tags":["生活"],"title":"都挺好","uri":"/2019-03-27-%E9%83%BD%E6%8C%BA%E5%A5%BD/"},{"categories":["折腾"],"content":"虽然折腾Gitpages的步骤网上有很多，但我还是遇到了很多坑，于是把步骤记录了下来。 加速成功的gitpages，访问速度真的快了好多好多好多好多。 ","date":"2019-03-25","objectID":"/2019-03-25-%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91cdn%E5%8A%A0%E9%80%9Fgitpages/:0:0","tags":["blog"],"title":"使用阿里云CDN全站加速gitpages","uri":"/2019-03-25-%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91cdn%E5%8A%A0%E9%80%9Fgitpages/"},{"categories":["折腾"],"content":"STEP 1 绑定域名 网上说得很多，我在这里也没遇到什么坑不再重复了，可以见这一条知乎。 下文的你的域名均指你申请的域名，而不是xxx.github.io，这个称为gitpages域名。 注意，绑定域名后，如果使用了gitment和gittalks，需要把OAuth application的Callback url改成新的域名。 ","date":"2019-03-25","objectID":"/2019-03-25-%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91cdn%E5%8A%A0%E9%80%9Fgitpages/:1:0","tags":["blog"],"title":"使用阿里云CDN全站加速gitpages","uri":"/2019-03-25-%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91cdn%E5%8A%A0%E9%80%9Fgitpages/"},{"categories":["折腾"],"content":"STEP 2 域名备案 使用CDN要求域名必须备案，这一步可能要一周左右。备案在阿里云备案。 值得一提的是备案的条件除了要有域名，还必须有一个三个月以上的云ECS/云虚拟主机产品，见这个页面。可我用Gitpages就是为了搭博客省钱啊……幸好之前有一个已经备案的域名了。还有24岁以下的话有云翼计划优惠。 ","date":"2019-03-25","objectID":"/2019-03-25-%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91cdn%E5%8A%A0%E9%80%9Fgitpages/:2:0","tags":["blog"],"title":"使用阿里云CDN全站加速gitpages","uri":"/2019-03-25-%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91cdn%E5%8A%A0%E9%80%9Fgitpages/"},{"categories":["折腾"],"content":"STEP 3 开启全站加速 在这里可以买到全站加速的资源包套餐。 然后在控制台-\u003e全站加速-\u003e域名管理下添加域名。在加速域名填写你的域名，选择源站域名，填写你的GitPage地址(xxxx.github.io)，端口如果选80，记得把github上自定义域名下的Enforce HTTPS也关闭。如果你的域名(不是xxx.github.io)开通了HTTPS可以选择443端口。 然后过一会儿你会获得一个CNAME。复制这个CNAME，去控制台-\u003e域名下修改域名解析。记录类型填写CNAME。 如果你的域名开启了HTTPS，跳到STEP 4把坑填了再回来看这里。 然后等个10分钟生效…… 然后ping一下的你的域名，速度就快多了。我的是在30ms以内。 ping namichan.site PING namichan.site.w.kunluncan.com (112.54.108.98): 56 data bytes 64 bytes from 112.54.108.98: icmp_seq=0 ttl=40 time=26.725 ms 64 bytes from 112.54.108.98: icmp_seq=1 ttl=40 time=27.770 ms 64 bytes from 112.54.108.98: icmp_seq=2 ttl=40 time=27.390 ms ","date":"2019-03-25","objectID":"/2019-03-25-%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91cdn%E5%8A%A0%E9%80%9Fgitpages/:3:0","tags":["blog"],"title":"使用阿里云CDN全站加速gitpages","uri":"/2019-03-25-%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91cdn%E5%8A%A0%E9%80%9Fgitpages/"},{"categories":["折腾"],"content":"STEP 4（可选）域名开启HTTPS 如果你的域名要开启HTTPS，可以先在控制台-\u003e域名-\u003e你的域名的管理里去申请SSL证书。证书签发后布署到CDN相应域名下。 然后在控制台-\u003e全站加速-\u003e域名管理里，可以看到HTTPS的状态已开启。注意CDN的HTTPS是按点击次数收费的最好确定余额有钱。 但这时还访问不了你的gitpages，浏览器会显示重定向太多次建议清除cookie………… 解决方法：在全站加速里配置你的域名，在回源配置开启静态协议跟随回源，在动静态加速规则-\u003e协议跟随回源里修改配置为443。 这时就能成功访问Gitpages了，而不会出现重定向太多次。 ","date":"2019-03-25","objectID":"/2019-03-25-%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91cdn%E5%8A%A0%E9%80%9Fgitpages/:4:0","tags":["blog"],"title":"使用阿里云CDN全站加速gitpages","uri":"/2019-03-25-%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91cdn%E5%8A%A0%E9%80%9Fgitpages/"},{"categories":["Diary"],"content":"这次的主题是yilia，一个hexo官网没有的但很多人都知道的大佬的主题。移动端的优化很好。 偏重于内容，挺生活化的，搜索也很全。 本来想用Maupassant，一个非常小清新且简洁的主题。但移动端问题有点多。比如移动端拉下去后不能到顶端，不能搜索和看标签。timeline的pass与now排列有问题……其他都还挺好的。 yilia接入gittalks评论。 Hexo yilia 主题一揽子使用方案 ","date":"2019-03-24","objectID":"/2019-03-24-%E6%88%91%E5%8F%88%E6%8D%A2%E4%B8%BB%E9%A2%98%E4%BA%86/:0:0","tags":["blog","主题"],"title":"我又换主题了","uri":"/2019-03-24-%E6%88%91%E5%8F%88%E6%8D%A2%E4%B8%BB%E9%A2%98%E4%BA%86/"},{"categories":["Diary"],"content":"2020-11 换成了Hugo的Loveit。 ","date":"2019-03-24","objectID":"/2019-03-24-%E6%88%91%E5%8F%88%E6%8D%A2%E4%B8%BB%E9%A2%98%E4%BA%86/:1:0","tags":["blog","主题"],"title":"我又换主题了","uri":"/2019-03-24-%E6%88%91%E5%8F%88%E6%8D%A2%E4%B8%BB%E9%A2%98%E4%BA%86/"},{"categories":["其他"],"content":"尽量弄点技术资源上的整理，或者记一点比较有趣的事。像p2p暴雷之类的就不记了。","date":"2018-08-17","objectID":"/2018-08-17-%E8%BF%91%E6%9C%9F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%862018-08-17/:0:0","tags":["资源整理"],"title":"近期资源整理2018-08-17","uri":"/2018-08-17-%E8%BF%91%E6%9C%9F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%862018-08-17/"},{"categories":["其他"],"content":"教程 1. Build CPU from scratch(英文) 从零开始建造CPU小游戏，从一个与非门开始一步步搭建出各种逻辑运算单元，直到拼出一个CPU。需要数字电路基础和计算机组成原理的知识。 2. Google推出的机器学习速成课程 Google推出的在线机器学习课程，并且不用科学上网。 ","date":"2018-08-17","objectID":"/2018-08-17-%E8%BF%91%E6%9C%9F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%862018-08-17/:1:0","tags":["资源整理"],"title":"近期资源整理2018-08-17","uri":"/2018-08-17-%E8%BF%91%E6%9C%9F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%862018-08-17/"},{"categories":["其他"],"content":"资源 这是第一次写，所以夹杂了之前的资源。 1. GitHub上有趣、入门级的开源项目分享站 开源项目分享站。大部分是中文项目，可按语言分类检索，每月出一期月刊，适合正在学习的人练手。 2. free-programming-books 整理了所有和编程相关的免费书籍，同时有中文版项目 3. 有了这个列表，程序员不愁没练手的小项目了 学了新语言之后不知道怎么巩固时，可以按照上面的列表实践练练。 4. OSDev.org 操作系统wiki。提供编写一个计算机操作系统的所需要的信息。可以作为教程看，也可以作为参考。 ","date":"2018-08-17","objectID":"/2018-08-17-%E8%BF%91%E6%9C%9F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%862018-08-17/:2:0","tags":["资源整理"],"title":"近期资源整理2018-08-17","uri":"/2018-08-17-%E8%BF%91%E6%9C%9F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%862018-08-17/"},{"categories":["其他"],"content":"文章 API之下 - ruanyf 借用一下文中的原话，“虽然标题里面有 API，但是本文谈的不是编程，而是更重要的事情”。 ","date":"2018-08-17","objectID":"/2018-08-17-%E8%BF%91%E6%9C%9F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%862018-08-17/:3:0","tags":["资源整理"],"title":"近期资源整理2018-08-17","uri":"/2018-08-17-%E8%BF%91%E6%9C%9F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%862018-08-17/"},{"categories":["其他"],"content":"有趣又无聊的发现 1. SCP基金会：全世界作者协同创作的小说 SCP中国分部 SCP基金会是一个虚构的神秘的组织，记载了各种超自然现象、个体等事件。小说的形式就是组织内一篇篇“机密文件”。有趣的是任何人都可以成为SCP系列的作者，只要文章符合要求就能被收录进SCP基金会网站。目前已经有了基于SCP世界观的游戏衍生和小说改编。 ","date":"2018-08-17","objectID":"/2018-08-17-%E8%BF%91%E6%9C%9F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%862018-08-17/:4:0","tags":["资源整理"],"title":"近期资源整理2018-08-17","uri":"/2018-08-17-%E8%BF%91%E6%9C%9F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%862018-08-17/"},{"categories":["其他"],"content":"近期事件 Python的流行趋势跃居编程语言第一（IEEE，PYPL） （Python都已经作为高考内容了，而当年高考时我还什么也不会） ","date":"2018-08-17","objectID":"/2018-08-17-%E8%BF%91%E6%9C%9F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%862018-08-17/:5:0","tags":["资源整理"],"title":"近期资源整理2018-08-17","uri":"/2018-08-17-%E8%BF%91%E6%9C%9F%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%862018-08-17/"},{"categories":["折腾"],"content":"工具：Chrome浏览器 反查用户分为视频里现存的弹幕反查和历史弹幕反查。其中反查历史弹幕需要用Chrome的调试工具，需要懂一点前端，比较简单，仍然是非技术向的一个小记。 ","date":"2018-08-15","objectID":"/2018-08-15-b%E7%AB%99%E5%8F%8D%E6%9F%A5%E7%94%A8%E6%88%B7%E5%BC%B9%E5%B9%95%E5%B0%8F%E8%AE%B0/:0:0","tags":["前端"],"title":"B站反查用户弹幕小记","uri":"/2018-08-15-b%E7%AB%99%E5%8F%8D%E6%9F%A5%E7%94%A8%E6%88%B7%E5%BC%B9%E5%B9%95%E5%B0%8F%E8%AE%B0/"},{"categories":["折腾"],"content":"从视频里现存的弹幕反查用户 能有工具用就用。以下两个工具都能实现从视频里现存的弹幕反查用户。 Bilibili弹幕发送查询 Chrome扩展Bilibili Helper ","date":"2018-08-15","objectID":"/2018-08-15-b%E7%AB%99%E5%8F%8D%E6%9F%A5%E7%94%A8%E6%88%B7%E5%BC%B9%E5%B9%95%E5%B0%8F%E8%AE%B0/:1:0","tags":["前端"],"title":"B站反查用户弹幕小记","uri":"/2018-08-15-b%E7%AB%99%E5%8F%8D%E6%9F%A5%E7%94%A8%E6%88%B7%E5%BC%B9%E5%B9%95%E5%B0%8F%E8%AE%B0/"},{"categories":["折腾"],"content":"从历史弹幕里反查 了解原理需要知道前端的基础。原理在这篇文章里说得很清楚了，一定要看。（目前文章已失效，请继续往下看） 问题是在于历史弹幕文件的获取。2018年历史弹幕的API有变动，需要用户已经登录了才能获取（因为页面的请求方式是是Request），因此之前网上的工具箱都没法用了。这里说一下使用Chrome的开发者工具获取历史弹幕并反查用户的方式。 首先，Chrome需要登录过bilibili，这样才能有cookie。 然后打开一个视频，这里用av29242495为例。 开启Chrome的开发者工具，并选择network选项卡，刷新一下，大概是这样。 在上图的bilibili界面中选\"查看历史弹幕\"，选则一个日期（我选的8月14日）。然后在右侧的Filter中填入history，结果是这样 其中以history开头的文件就是我们所需要的历史弹幕文件，双击就可以在新标签页中打开。这个例子中的历史弹幕文件地址长这样： https://api.bilibili.com/x/v2/dm/history?type=1\u0026oid=50775916\u0026date=2018-08-13 可以见这个历史弹幕的api就长这样，oid是视频的编号（不是av号），后面加个date。type=1目前我没弄清楚是什么。 弹幕文件里的弹幕都是这个样子的 \u003cd p=\"弹幕出现时间,模式,字体大小,颜色,发送时间戳,弹幕池,用户Hash,数据库ID\"\u003e123123\u003c/d\u003e \u003c!--比如--\u003e \u003cd p=\"10.15700,1,25,16777215,1534175832,0,39d120,3687662110113792\"\u003e卧槽番外\u003c/d\u003e \u003cd p=\"19.93100,1,25,16777215,1534175761,0,6acc8733,3687624958541824\"\u003e台词太强了，节奏太好了\u003c/d\u003e \u003cd p=\"24.98000,1,25,16777215,1534175677,0,f11c8b72,3687580849668100\"\u003e来啦 给大大比心\u003c/d\u003e 其中要用的是用户Hash。用户Hash只是简单的把数字ID用ITU I.363.5算法进行了Hash。不过这里不用手动写算法了，因为下面的接口还能用。 https://biliquery.typcn.com/api/user/hash/[用户Hash] 比如我从文件里任意选了两个用户Hash，替换掉上面的[用户Hash]，分别返回了如下结果 {\"error\":0,\"data\":[{\"id\":17882889}]} // 比较老的用户 {\"error\":0,\"data\":[{\"id\":390105526},{\"id\":21670130}]} // 一般新用户 用户ID(uid)为后者。用B站的个人主页网址格式就能找到了弹幕发送者的主页了。格式如下 https://space.bilibili.com/uid/#/ ","date":"2018-08-15","objectID":"/2018-08-15-b%E7%AB%99%E5%8F%8D%E6%9F%A5%E7%94%A8%E6%88%B7%E5%BC%B9%E5%B9%95%E5%B0%8F%E8%AE%B0/:2:0","tags":["前端"],"title":"B站反查用户弹幕小记","uri":"/2018-08-15-b%E7%AB%99%E5%8F%8D%E6%9F%A5%E7%94%A8%E6%88%B7%E5%BC%B9%E5%B9%95%E5%B0%8F%E8%AE%B0/"},{"categories":["折腾"],"content":"阅读前提: 已经用hexo搭建好静态博客，并已经能用hexo d命令发布到gitpages 习惯使用mweb管理md文档 在使用hexo的时候，发现新建发布一整个流程还是过于繁琐。比如想新发布一篇文章的时候，有以下步骤： 先打开终端cd到存放hexo的目录 终端执行hexo new post title，新建文档 用vim（或其他文本编辑器）编辑文章。如果不用vim，我还得切换到别的应用 （可能）hexo s预览一下检查md渲染有没有问题 hexo g -d发布 而我只是想专注写然后发布（第3步），然后一键发布。并且平时用的是mweb这个markdown编辑器做文档管理，几乎所有的markdown文档都习惯用它写。我并不想在命令行和终端之间切来切去。我想做到的是： 在mweb的外部文档库里，一键新建文档，并带hexo默认的post格式 编辑文档 一键发布到gitpages 实现上述方案的工具： mweb文本编辑器，主要用的外部模式引入站点 Alfred PowerPack。代替spotlight搜索，可以自己定制脚本执行（powerpack版）。 mweb-alfred－workflow。基于这个Alfred workflow来实现mhexo。 以上前两软件都是收费的。请尽可能支持正版。(当然按国内的情况，嗯。) mweb-alfred－workflow其实和快速新建文章和与发布无关。但是mweb的搜索功能确实比较弱，用上可以增强不少。 ","date":"2018-06-16","objectID":"/2018-06-16-hexo-gitpages-mweb%E5%BF%AB%E9%80%9F%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E5%B9%B6%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0macos/:0:0","tags":["blog"],"title":"hexo+gitpages+mweb快速新建文章并发布博客更新（macOS）","uri":"/2018-06-16-hexo-gitpages-mweb%E5%BF%AB%E9%80%9F%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E5%B9%B6%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0macos/"},{"categories":["折腾"],"content":"功能说明 按alt+space，激活alfred。 输入mhexo -n [文章标题]，可以自动在你的hexo站点文件夹下新建一篇带有hexo默认post格式的文章，标题已经填好了。 输入mhexo -d，一键生成并发布到gitpages。并自动用浏览器打开gitpages上的站点。 ","date":"2018-06-16","objectID":"/2018-06-16-hexo-gitpages-mweb%E5%BF%AB%E9%80%9F%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E5%B9%B6%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0macos/:1:0","tags":["blog"],"title":"hexo+gitpages+mweb快速新建文章并发布博客更新（macOS）","uri":"/2018-06-16-hexo-gitpages-mweb%E5%BF%AB%E9%80%9F%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E5%B9%B6%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0macos/"},{"categories":["折腾"],"content":"Alfred workflow的定制 把mweb-alfred-workflow拖进Alfred workflows之后，新建下图的最后一行的三个模块。 其中mhexo(keyword)的配置如下： 添加最后一个bash脚本内容如下： if [ -f \"${MHEXO_HOME}\" -o -z \"${MHEXO_HOME}\" ];then exit 1 fi export PATH=/usr/local/bin:$PATH cd \"${MHEXO_HOME}\" para_arr=($1) case ${para_arr[0]} in -n) hexo new post ${para_arr[1]} echo \"new post ${para_arr[1]}\" ;; -d) hexo g -d open \"$MHEXO_URL\" echo \"deploy done\" ;; *) open . ;; esac 添加变量。按右上角的{x}，新增MHEXO_HOME和MHEXO_URL。前者的值是你的hexo站点根目录，后者是你的gitpages域名。 现在打开mweb，就可以使用alfred快速新建文章并发布了。不必在mweb和命令行之间切来切去了。完美！ ","date":"2018-06-16","objectID":"/2018-06-16-hexo-gitpages-mweb%E5%BF%AB%E9%80%9F%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E5%B9%B6%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0macos/:2:0","tags":["blog"],"title":"hexo+gitpages+mweb快速新建文章并发布博客更新（macOS）","uri":"/2018-06-16-hexo-gitpages-mweb%E5%BF%AB%E9%80%9F%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E5%B9%B6%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0macos/"},{"categories":["Diary"],"content":"Jekyll还是怎么都觉得不好用，换成了Hexo，主题用的最大众的NexT。 首先要明白博客的定位。既然是博客，就是给人看的，随便的笔记就不要发上去了。因此也不要在意静态博客系统不灵活这个事。 参考文档： Hexo Next 有什么问题看基本上面两个都能解决。 ","date":"2018-06-14","objectID":"/2018-06-14-%E4%BB%8Ejekyll%E5%88%B0hexo/:0:0","tags":["blog"],"title":"从Jekyll到Hexo","uri":"/2018-06-14-%E4%BB%8Ejekyll%E5%88%B0hexo/"},{"categories":["Diary"],"content":"安装node.js和建立站点 我是mac，用brew安装就好 $ brew install node $ npm install -g hexo-cli 建立站点 $ hexo init \u003cfolder\u003e $ cd \u003cfolder\u003e $ npm install 打开hexo服务后，就可以看生成的站点了 $ hexo s ","date":"2018-06-14","objectID":"/2018-06-14-%E4%BB%8Ejekyll%E5%88%B0hexo/:1:0","tags":["blog"],"title":"从Jekyll到Hexo","uri":"/2018-06-14-%E4%BB%8Ejekyll%E5%88%B0hexo/"},{"categories":["Diary"],"content":"Hexo配置教程（重点） Hexo的安装： Hexo Next NexT主题 ","date":"2018-06-14","objectID":"/2018-06-14-%E4%BB%8Ejekyll%E5%88%B0hexo/:2:0","tags":["blog"],"title":"从Jekyll到Hexo","uri":"/2018-06-14-%E4%BB%8Ejekyll%E5%88%B0hexo/"},{"categories":["Diary"],"content":"Git部署教程 和jeklly不一样，不需要用git手动关联github。用的是hexo的deploy功能。 详情见Hexo部署 ","date":"2018-06-14","objectID":"/2018-06-14-%E4%BB%8Ejekyll%E5%88%B0hexo/:3:0","tags":["blog"],"title":"从Jekyll到Hexo","uri":"/2018-06-14-%E4%BB%8Ejekyll%E5%88%B0hexo/"},{"categories":["Diary"],"content":"在侧边栏显示分类 在NexT主题的layout/_custom/sidebar.swig里添加： \u003cdiv class=\"category-all-page\"\u003e \u003cdiv class=\"category-all\"\u003e {{ list_categories({depth: 1}) }} \u003c/div\u003e \u003c/div\u003e 标签同理，使用 list_tags 函数即可。 ","date":"2018-06-14","objectID":"/2018-06-14-%E4%BB%8Ejekyll%E5%88%B0hexo/:4:0","tags":["blog"],"title":"从Jekyll到Hexo","uri":"/2018-06-14-%E4%BB%8Ejekyll%E5%88%B0hexo/"},{"categories":["折腾"],"content":"由于最近需要把markdown文件导出为pdf并且需要用到latex的行内的数学公式，只用typora无法做到，于是开始使用pandoc。问题是pandoc中在从md转pdf的时候需要手动设置中文，否则会有转换问题。这个坑查了很久，最终从一个pandoc模板里得到了解决方法。 系统：macOS 10.13.2 ","date":"2018-02-06","objectID":"/2018-02-06-%E4%BD%BF%E7%94%A8pandoc%E8%BD%AC%E6%8D%A2md%E4%B8%BApdf%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%B8%AD%E6%96%87%E6%94%AF%E6%8C%81/:0:0","tags":["工具","markdown"],"title":"使用pandoc转换md为PDF并添加中文支持","uri":"/2018-02-06-%E4%BD%BF%E7%94%A8pandoc%E8%BD%AC%E6%8D%A2md%E4%B8%BApdf%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%B8%AD%E6%96%87%E6%94%AF%E6%8C%81/"},{"categories":["折腾"],"content":"基本操作 准备：需要先安装HomeBrew 安装pandoc brew install pandoc 安装texlive，支持latex brew cask install mactex 导出pandoc转换为时的latex默认模板 pandoc -D latex \u003e template.latex 在template.latex里添加中文字体支持 \\usepackage{fontspec} % 允許設定字體 \\usepackage{xeCJK} % 分開設置中英文字型 \\setCJKmainfont{SimSun} % 設定中文字型 \\setmainfont{Helvetical} % 設定英文字型 \\setromanfont{Helvetical} % 字型 \\setmonofont{Courier New} \\linespread{1.2}\\selectfont % 行距 使用模板把md转换为pdf pandoc --pdf-engine=xelatex --template=[template.latex的路径] newfile.md -o newfile.pdf ","date":"2018-02-06","objectID":"/2018-02-06-%E4%BD%BF%E7%94%A8pandoc%E8%BD%AC%E6%8D%A2md%E4%B8%BApdf%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%B8%AD%E6%96%87%E6%94%AF%E6%8C%81/:1:0","tags":["工具","markdown"],"title":"使用pandoc转换md为PDF并添加中文支持","uri":"/2018-02-06-%E4%BD%BF%E7%94%A8pandoc%E8%BD%AC%E6%8D%A2md%E4%B8%BApdf%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%B8%AD%E6%96%87%E6%94%AF%E6%8C%81/"},{"categories":["折腾"],"content":"pandoc的默认使用的模板路径 在mac os下，在～/.pandoc/templates文件夹里。没有的话要手动创建的。 cd ~ mkdir -p ~/.pandoc/templates 导出latex的默认模板至默认的模板路径 pandoc -D latex \u0026gt; ~/.pandoc/templates/default.latex 在default.latex里添加中文字体支持 \\usepackage{fontspec} % 允許設定字體 \\usepackage{xeCJK} % 分開設置中英文字型 \\setCJKmainfont{SimSun} % 設定中文字型 \\setmainfont{Vollkorn} % 設定英文字型 \\setromanfont{Vollkorn} % 字型 \\setmonofont{Courier New} \\linespread{1.2}\\selectfont % 行距 这样下来转换的时候不使用指定的template，使用的就是default模板。例如 pandoc --pdf-engine=xelatex newfile.md -o newfile.pdf ","date":"2018-02-06","objectID":"/2018-02-06-%E4%BD%BF%E7%94%A8pandoc%E8%BD%AC%E6%8D%A2md%E4%B8%BApdf%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%B8%AD%E6%96%87%E6%94%AF%E6%8C%81/:2:0","tags":["工具","markdown"],"title":"使用pandoc转换md为PDF并添加中文支持","uri":"/2018-02-06-%E4%BD%BF%E7%94%A8pandoc%E8%BD%AC%E6%8D%A2md%E4%B8%BApdf%E5%B9%B6%E6%B7%BB%E5%8A%A0%E4%B8%AD%E6%96%87%E6%94%AF%E6%8C%81/"},{"categories":["Diary"],"content":"欢迎来到一个平凡的博客。 这个博客包含的是发布后不会再更改的文章，不会包含个人笔记，一是发布之后更新起来着实麻烦，二是过于琐碎，三是markdown的渲染结果不同平台有较大的差异，尤其在经常换行的技术性笔记上。 博客模板文件使用的是huxblog-boilerplate的模板，它的来源是huxpro.github.io。十分感谢。 鉴于模板代码是两年前的，此期间有Liquid语法一些小幅度的更新，对模板文件进行了一些小的修复，具体情况见我的博客仓库README。 三水，记于2018年02月06日。 ","date":"2018-02-06","objectID":"/2018-02-06-hello-2018/:0:0","tags":["blog"],"title":"Welcome to Nami's blog","uri":"/2018-02-06-hello-2018/"},{"categories":["折腾"],"content":"自从接触了markdown语法爱不释手，简单美观，又能专注于写作。但是平时写笔记的印象笔记并不支持markdown，如果写的是发布一些文章还要笔记重排版，十分麻烦。直到偶然看到了atom 上有人贡献的ever-notedown插件。觉得这就是我要找的终极解决方案。 ","date":"0001-01-01","objectID":"/2018-02-06-macos%E4%BD%BF%E7%94%A8markdown%E5%90%8C%E6%AD%A5%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/:0:0","tags":["工具","markdown"],"title":"macOS使用markdown同步印象笔记解决方案","uri":"/2018-02-06-macos%E4%BD%BF%E7%94%A8markdown%E5%90%8C%E6%AD%A5%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"categories":["折腾"],"content":"原理 大部分markdown编辑器对印象笔记的支持都只限于发布，而不是同步。这是由于markdown自身的单向输出特点的决定的。 ever-notedown通过Apple Script读取印象笔记客户端的内容、同步印象笔记。也正因如此，只适用于macOS平台。 插件的思路和马克飞象非常相似，从印象笔记pull一条笔记转化为md，并储存在本机上。修改时可以修改本机的md后更新到印象笔记客户端。也可以在印象笔记客户端修改后，重新pull下来。相当于一个离线的evernote编辑器。 如果将存放md的文件夹云同步，或者使用github仓库，还可以进行版本控制。 ","date":"0001-01-01","objectID":"/2018-02-06-macos%E4%BD%BF%E7%94%A8markdown%E5%90%8C%E6%AD%A5%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/:1:0","tags":["工具","markdown"],"title":"macOS使用markdown同步印象笔记解决方案","uri":"/2018-02-06-macos%E4%BD%BF%E7%94%A8markdown%E5%90%8C%E6%AD%A5%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"categories":["折腾"],"content":"准备 macOS系统 dmg安装的Evernote6.0以上的客户端（不能是App Store的） 目前最新的客户端是6.13，在使用插件时经常崩溃，建议下6.5及之前的版本。 atom编辑器 在atom编辑器内安装插件ever-notedown（以下用evnd简称） ","date":"0001-01-01","objectID":"/2018-02-06-macos%E4%BD%BF%E7%94%A8markdown%E5%90%8C%E6%AD%A5%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/:2:0","tags":["工具","markdown"],"title":"macOS使用markdown同步印象笔记解决方案","uri":"/2018-02-06-macos%E4%BD%BF%E7%94%A8markdown%E5%90%8C%E6%AD%A5%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"categories":["折腾"],"content":"基本使用 导入本地印象笔记 在Packages-\u003eEver Notedown-\u003e Toggle EVND Panel里有import from evernote。可以在搜索印象笔记客户端存在的笔记。 导入成功后就可以使用markdown开始编辑了。 插入图片 插入图片也非常方便，支持拖动图片至编辑器与屏幕截屏的直接粘贴 markdown笔记管理 在markdown里面可以查看和删除已经转换为md的笔记。已经按所属的笔记本归类了。 上面是一部分基本功能，完整功能看这里ever-notedown。 ","date":"0001-01-01","objectID":"/2018-02-06-macos%E4%BD%BF%E7%94%A8markdown%E5%90%8C%E6%AD%A5%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/:3:0","tags":["工具","markdown"],"title":"macOS使用markdown同步印象笔记解决方案","uri":"/2018-02-06-macos%E4%BD%BF%E7%94%A8markdown%E5%90%8C%E6%AD%A5%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"categories":["折腾"],"content":"已知bug 很可惜的该插件已经很久没有维护过了，因此随着印象笔记客户端版本的更新，不兼容性越来越多。在印象笔记6.13的客户端已经闪退为体验非常糟心。在我所使用的印象笔记6.5的版本也有一个比较影响体验bug。 在evnd里新建的笔记无法创建到印象笔记里面。 最好的方法是先在印象笔记里建一条空笔记，然后再import进evnd。 能不能接受这个稍微繁琐的操作就因人而异了。对于我主要是需要多平台发布的文章需要md格式存档，平时的笔记使用evernote足够。 ","date":"0001-01-01","objectID":"/2018-02-06-macos%E4%BD%BF%E7%94%A8markdown%E5%90%8C%E6%AD%A5%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/:4:0","tags":["工具","markdown"],"title":"macOS使用markdown同步印象笔记解决方案","uri":"/2018-02-06-macos%E4%BD%BF%E7%94%A8markdown%E5%90%8C%E6%AD%A5%E5%8D%B0%E8%B1%A1%E7%AC%94%E8%AE%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"categories":["折腾"],"content":"记录一些有关于百度云限速破解的工具。 ","date":"0001-01-01","objectID":"/2018-03-27-macos%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95%E5%A4%87%E4%BB%BD/:0:0","tags":["工具"],"title":"macOS百度网盘下载方法备份","uri":"/2018-03-27-macos%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95%E5%A4%87%E4%BB%BD/"},{"categories":["折腾"],"content":"proxyee-down 安装和使用看这个页面。 这是最近才发现的项目，非常好用，因为自带嗅探模式，点下载按钮就直接跳到proxyee里下载了，什么都不用干，可以说是非常傻瓜了。 如果关闭嗅探模式，也可以用百度网盘的直链来手动创建任务。(据说有的直链是没限速的) ","date":"0001-01-01","objectID":"/2018-03-27-macos%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95%E5%A4%87%E4%BB%BD/:1:0","tags":["工具"],"title":"macOS百度网盘下载方法备份","uri":"/2018-03-27-macos%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95%E5%A4%87%E4%BB%BD/"},{"categories":["折腾"],"content":"直链提取工具 准备： 需要翻墙 Chrome浏览器 Chrome浏览器安装好tampermonkey插件 有了tampermonkey插件后，安装这个脚本可以在下载页面中多出一个“高速下载”，可以提取直链或直接下载，或者复制直链到迅雷下载都可以。 tampermonkey脚本维护不定，经常过段时间有的脚本就不维护了要找新的。 ","date":"0001-01-01","objectID":"/2018-03-27-macos%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95%E5%A4%87%E4%BB%BD/:2:0","tags":["工具"],"title":"macOS百度网盘下载方法备份","uri":"/2018-03-27-macos%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95%E5%A4%87%E4%BB%BD/"},{"categories":["折腾"],"content":"ARIA2 + BaiduExporter 之前用的这个，现在不太好使了，由于aria2最多16线程的限制以及百度云服务端的限速太狠，已经没法高速了，就做个备份，下别的东西还是可以的，毕竟aria2的性能不错。 准备条件： mac os上安装好homebrew chrome浏览器 mac os系统下，打开终端，先用homebrew安装aria2c $ brew install aria2 再把这个页面的内容替换掉~/.aria2/aria2.conf里的内容。 然后在终端启动aria2 $ aria2c $ aria2c -D # 后台驻留模式 再把这个项目里的.crx插件下载下来。拖进chrome://extensions里添加插件。 然后会随便下载百度云资源的时候，会出现导出下载，直接选aria2c下载就好了。终端里会出现下载进度。想要GUI在线管理下载任务，访问这个页面。 顺带一提，BaiduExporter的作者一直没弃，真的良心啊。 ","date":"0001-01-01","objectID":"/2018-03-27-macos%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95%E5%A4%87%E4%BB%BD/:3:0","tags":["工具"],"title":"macOS百度网盘下载方法备份","uri":"/2018-03-27-macos%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E6%96%B9%E6%B3%95%E5%A4%87%E4%BB%BD/"}]